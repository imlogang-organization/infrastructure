version: 2.1 

default_branch_filtering: &default_branch_filtering
  filters:
    branches:
      only:
        - main

executors:
  ubuntu-k8s:
    machine: true
    resource_class: imlogang-organization-server/ubuntu-k8s
  machine-runner:
    machine: true
    resource_class: imlogang-organization-server/machine-runner
  docker-host:
    machine: true
    resource_class: imlogang-organization-server/docker-host

orbs:
  aws-cli: circleci/aws-cli@4.1.3
  gcp-cli: circleci/gcp-cli@3.1.1

parameters:
  prod:
    default: false
    type: boolean
  stage:
    default: false
    type: boolean
  container-runner-cloud:
    default: false
    type: boolean
  container-runner-server:
    default: false
    type: boolean
  circleci-release-agent-system:
    default: false
    type: boolean
  minio:
    default: false
    type: boolean
  aws:
    default: false
    type: boolean
  cloudflare:
    default: false
    type: boolean
  logangodsey:
    default: false
    type: boolean
  container-agent-values-update:
    default: false
    type: boolean
  container-agent-gcp-secret-upgrade:
    default: false
    type: boolean
  container-agent-gcp-server-upgrade:
    default: false
    type: boolean
  container-agent-server-values-update:
    default: false
    type: boolean
  docker_host:
    default: false
    type: boolean
  influxdb:
    default: false
    type: boolean
  proxmox0:
    default: false
    type: boolean
  namespace:
    default: ""
    type: string
  file-path:
    default: ""
    type: string
  

commands:
  backend_script:
    steps:
      - run: 
          name: execute backend script
          command: |
            cd << pipeline.parameters.file-path >>
            chmod +x ./backend.sh && ./backend.sh
  managed-namespace:
    steps:
      - run: 
          name: make sure namespace managed
          command: |
            cd << pipeline.parameters.file-path >>
            terraform import kubernetes_namespace.<< pipeline.parameters.namespace >> << pipeline.parameters.namespace >>

  terraform-plan:
    steps:
      - run: 
          name: terraform plan
          command: |
            cd << pipeline.parameters.file-path >>
            terraform plan -out plan.tf
  terraform-init:
    steps:
      - run:
          name: terraform init
          command: |
            cd << pipeline.parameters.file-path >>
            terraform init
  
  terraform-apply-command:
    steps:
      - run:
          name: terraform apply
          command: |
            cd << pipeline.parameters.file-path >>
            terraform apply -auto-approve "plan.tf"
            
  envvar-prod:
    steps:
      - run:
          name: echo envvars for prod
          command: |
            echo 'export TF_VAR_client_id="'"${CLIENT_ID}"'"' >> "$BASH_ENV"
            echo 'export TF_VAR_beemoviebot="'"${BEEMOVIEBOT}"'"' >> "$BASH_ENV"
            echo 'export TF_VAR_pterotoken="'"${PteroToken}"'"' >> "$BASH_ENV"
            echo 'export TF_VAR_circle_token="'"${CIRCLE_TOKEN_BOT}"'"' >> "$BASH_ENV"
  
  envvar-stage:
    steps:
      - run:
          name: echo envvars for staging
          command: |
            echo 'export TF_VAR_client_id="'"${CLIENT_ID_STAGING}"'"' >> "$BASH_ENV"
            echo 'export TF_VAR_beemoviebot="'"${BEEMOVIEBOT_STAGING}"'"' >> "$BASH_ENV"
            echo 'export TF_VAR_pterotoken="'"${PteroToken}"'"' >> "$BASH_ENV"
            echo 'export TF_VAR_circle_token="'"${CIRCLE_TOKEN_BOT}"'"' >> "$BASH_ENV"
  
  cloud-container-runner:
      steps:
        - run:
            name: echo envvars for cloud container runner
            command: |
              echo 'export TF_VAR_imlogang_organization_container_runner="'"${IMLOGANG_CONTAINER_RUNNER}"'"' >> "$BASH_ENV"
              echo 'export TF_VAR_logan_container_runner="'"${LOGAN_CONTAINER_RUNNER}"'"' >> "$BASH_ENV"
  container-runner-server:
      steps:
        - run:
            name: echo envvars for server container runner
            command: |
              echo 'export TF_VAR_imlogang_organization_container_runner_server="'"${IMLOGANG_CONTAINER_RUNNER_SERVER}"'"' >> "$BASH_ENV"
              
  circleci-release-agent-system:
      steps:
        - run:
            name: echo envvars for server container runner
            command: |
              echo 'export TF_VAR_circleci_release_agent_system_token="'"${CIRCLECI_RELEASE_AGENT_TOKEN}"'"' >> "$BASH_ENV"
  aws-fix-envvars:
    steps:
      - run:
          name: fix aws envvars
          command: |
            echo 'export AWS_ACCESS_KEY_ID="'"${AWS_CLI_STR_ACCESS_KEY_ID}"'"' >> "$BASH_ENV"
            echo 'export AWS_SECRET_ACCESS_KEY="'"${AWS_CLI_STR_SECRET_ACCESS_KEY}"'"' >> "$BASH_ENV"
            echo 'export AWS_SESSION_TOKEN="'"${AWS_CLI_STR_SESSION_TOKEN}"'"' >> "$BASH_ENV"
  cloudflare-fix-envvars:
    steps:
      - run: 
          name: fix cloudflare envvars
          command: |
            echo 'export TF_VAR_cloudflare_api_token="'"${CLOUDFLARE_ACCESS_KEY}"'"' >> "$BASH_ENV"
  # cloudflare-fix-envvars-logangodsey:
  #   steps:
  #     - run: 
  #         name: fix cloudflare envvars
  #         command: |
  #           echo 'export TF_VAR_cloudflare_api_token="'"${CLOUDFLARE_ACCESS_KEY_LOGANGODSEY}"'"' >> "$BASH_ENV"
  get_public_ip:
    steps:
      - run: 
          name: find public IP
          command: |
            TF_VAR_dynamic_public_ip=$(curl ifconfig.me)
            echo 'export TF_VAR_dynamic_public_ip="'"${TF_VAR_dynamic_public_ip}"'"' >> "$BASH_ENV"
            echo "Public IP is $TF_VAR_dynamic_public_ip"
jobs:
  terraform-influxdb-plan:
    executor: machine-runner
    steps:
      - checkout
      - backend_script
      - terraform-init
      - terraform-plan
      - persist_to_workspace:
            root: .
            paths:
              - .

  terraform-docker-host-plan:
    executor: docker-host
    steps:
      - checkout
      - backend_script
      - terraform-init
      - terraform-plan
      - persist_to_workspace:
          root: .
          paths:
            - .

  terraform-plan-prod:
    executor: machine-runner
    steps:
      - checkout
      - envvar-prod
      - terraform-init
      - managed-namespace
      - terraform-plan
      - persist_to_workspace:
          root: .
          paths:
            - .

  terraform-plan-stage:
    executor: machine-runner
    steps:
      - checkout
      - envvar-stage
      - terraform-init
      - managed-namespace
      - terraform-plan
      - persist_to_workspace:
          root: .
          paths:
            - .
    
  terraform-plan-container-runner-cloud:
    executor: machine-runner
    steps:
      - checkout
      - cloud-container-runner
      - terraform-init
      - terraform-plan
      - persist_to_workspace:
          root: .
          paths:
            - .

  terraform-plan-container-runner-server:
    executor: machine-runner
    steps:
      - checkout
      - container-runner-server
      - terraform-init
      - managed-namespace
      - terraform-plan
      - persist_to_workspace:
          root: .
          paths:
            - .

  terraform-circleci-release-agent-system-plan:
    executor: machine-runner
    steps:
      - checkout
      - circleci-release-agent-system
      - terraform-init
      - managed-namespace
      - terraform-plan
      - persist_to_workspace:
          root: .
          paths:
            - .

  terraform-minio-plan:
    executor: machine-runner
    steps:
      - checkout
      - backend_script
      - terraform-init
      - terraform-plan
      - persist_to_workspace:
          root: .
          paths:
            - .

  terraform-aws-plan:
    docker:
      - image: dockerregistry.logangodsey.com/aws:04-17-2024
    resource_class: medium
    steps:
      - checkout
      - aws-cli/assume_role_with_web_identity:
          region: us-east-2
          role_arn: arn:aws:iam::339712737644:role/cciserver-aws-terraform
      - aws-fix-envvars
      - run: 
          name: execute backend script
          command: |
            cd << pipeline.parameters.file-path >>
            chmod +x ./backend.sh && ./backend.sh
      - terraform-init
      - terraform-plan
      - persist_to_workspace:
          root: .
          paths:
            - .

  terraform-cloudflare-plan:
    executor: machine-runner
    steps:
      - run: 
          name: echo resource editing
          command: echo << pipeline.parameters.file-path >>
      - checkout
      - get_public_ip
      - cloudflare-fix-envvars
      - run: 
          name: execute backend script
          command: |
            cd << pipeline.parameters.file-path >>
            chmod +x ./backend.sh && ./backend.sh
      - terraform-init
      - terraform-plan
      - persist_to_workspace:
          root: .
          paths:
            - .

  terraform-container-agent-update-plan:
    executor: ubuntu-k8s
    steps:
      - run: 
          name: echo resource editing
          command: echo << pipeline.parameters.file-path >>
      - checkout
      - run: 
          name: execute backend script
          command: |
            cd << pipeline.parameters.file-path >>
            chmod +x ./backend.sh && ./backend.sh
      - terraform-init
      - terraform-plan
      - persist_to_workspace:
          root: .
          paths:
            - .
  
  terraform-plan-gcp-container-runner-upgrade:
    executor: machine-runner
    steps:
      - checkout
      - gcp-cli/setup:
          use_oidc: true
          version: 445.0.0
      - terraform-init
      - managed-namespace
      - terraform-plan
      - persist_to_workspace:
          root: .
          paths:
            - .
  container-runner-server-helm-plan:
    executor: machine-runner
    steps:
      - checkout
      - terraform-init
      - managed-namespace
      - terraform-plan
      - persist_to_workspace:
          root: .
          paths:
            - .

  terraform-apply:
    executor: ubuntu-k8s
    steps:
      - attach_workspace:
          at: .
      - terraform-apply-command
  
  terraform-apply-docker-host:
    executor: docker-host
    steps:
      - attach_workspace:
          at: .
      - terraform-apply-command
    
  terraform-apply-influxdb:
    executor: machine-runner
    steps:
      - attach_workspace:
          at: .
      - terraform-apply-command
    
  terraform-apply-aws:
    docker:
      - image: dockerregistry.logangodsey.com/aws:04-17-2024
    resource_class: medium
    steps:
      - aws-cli/assume_role_with_web_identity:
          region: us-east-2
          role_arn: arn:aws:iam::339712737644:role/cciserver-aws-terraform
      - aws-fix-envvars
      - attach_workspace:
          at: .
      - terraform-apply-command
  
  terraform-apply-gcp:
    docker: 
      - image: dockerregistry.logangodsey.com/gcp:12-05-2023
    steps:
      - gcp-cli/setup:
          use_oidc: true
          version: 445.0.0
      - attach_workspace:
          at: .
      - terraform-apply-command

  terraform-plan-proxmox:
    executor: machine-runner
    steps:
      - checkout
      - backend_script
      - terraform-init
      - terraform-plan
      - persist_to_workspace:
          root: .
          paths:
            - .
  
  terraform-apply-proxmox:
    executor: machine-runner
    steps:
      - attach_workspace:
          at: .
      - terraform-apply-command


workflows:
  terraform-beemoviebot-prod:
    when: << pipeline.parameters.prod >>
    jobs:
      - terraform-plan-prod:
          context:
            - kubeconfig
            - beemoviebot
          <<: *default_branch_filtering
      - terraform-apply:
          requires:
            - terraform-plan-prod
          context:
            - kubeconfig
            - beemoviebot
          <<: *default_branch_filtering
          
  terraform-beemoviebot-stage:
    when: << pipeline.parameters.stage >>
    jobs:
      - terraform-plan-stage:
          context:
            - kubeconfig
            - beemoviebot
          <<: *default_branch_filtering
      - terraform-apply:
          requires:
            - terraform-plan-stage
          context:
            - kubeconfig
            - beemoviebot
          <<: *default_branch_filtering
  
  terraform-cloud-container-runner:
    when: << pipeline.parameters.container-runner-cloud >>
    jobs:
      - terraform-plan-container-runner-cloud:
          context:
            - kubeconfig
            - container-runner-cloud
          <<: *default_branch_filtering
      - terraform-apply:
          requires:
            - terraform-plan-container-runner-cloud
          context:
            - kubeconfig
            - container-runner-cloud
          <<: *default_branch_filtering
  
  terraform-server-container-runner:
    when: << pipeline.parameters.container-runner-server >>
    jobs:
      - terraform-plan-container-runner-server:
          context:
            - kubeconfig
            - container-runner-server
          <<: *default_branch_filtering
      - terraform-apply:
          requires:
            - terraform-plan-container-runner-server
          context:
            - kubeconfig
            - container-runner-server
          <<: *default_branch_filtering
  
  terraform-circleci-release-agent-system:
    when: << pipeline.parameters.circleci-release-agent-system >>
    jobs:
      - terraform-circleci-release-agent-system-plan:
          context:
            - kubeconfig
            - circleci-release-agent-system
          <<: *default_branch_filtering
      - terraform-apply:
          requires:
            - terraform-circleci-release-agent-system-plan
          context:
            - kubeconfig
            - circleci-release-agent-system
          <<: *default_branch_filtering
    
  terraform-minio:
    when: << pipeline.parameters.minio >>
    jobs:
        - terraform-minio-plan:
            context:
              - kubeconfig
              - minio
              - minio_backend
            <<: *default_branch_filtering
        - terraform-apply:
            requires:
              - terraform-minio-plan
            context:
              - kubeconfig
              - minio
              - minio_backend
            <<: *default_branch_filtering

  terraform-aws:
    when: << pipeline.parameters.aws >>
    jobs:
        - terraform-aws-plan:
            context:
              - kubeconfig
              - minio_backend
            <<: *default_branch_filtering
        - terraform-apply-aws:
            requires:
              - terraform-aws-plan
            context:
              - kubeconfig
              - minio_backend
            <<: *default_branch_filtering

  terraform-cloudflare:
    when: << pipeline.parameters.cloudflare >>
    jobs:
      - terraform-cloudflare-plan:
          context:
            - kubeconfig
            - cloudflare
            - minio_backend
          <<: *default_branch_filtering
      - terraform-apply:
          requires:
            - terraform-cloudflare-plan
          context:
            - kubeconfig
            - cloudflare
            - minio_backend
          <<: *default_branch_filtering

  terraform-container-agent-update:
    when: << pipeline.parameters.container-agent-values-update >>
    jobs:
      - terraform-container-agent-update-plan:
          context:
            - kubeconfig
            - minio_backend
          <<: *default_branch_filtering
      - terraform-apply:
          requires:
            - terraform-container-agent-update-plan
          context:
            - kubeconfig
            - minio_backend
          <<: *default_branch_filtering

  terraform-gcp:
    when: 
      or:
        - << pipeline.parameters.container-agent-gcp-secret-upgrade >>
        - << pipeline.parameters.container-agent-gcp-server-upgrade >>
    jobs:
      - terraform-plan-gcp-container-runner-upgrade:
          context:
            - gcloud
            - gcp_container_runner_token
          <<: *default_branch_filtering
      - terraform-apply-gcp:
          requires:
            - terraform-plan-gcp-container-runner-upgrade
          context:
            - gcloud
            - gcp_container_runner_token
          <<: *default_branch_filtering
  
  container-runner-server-helm:
    when: << pipeline.parameters.container-agent-server-values-update >>
    jobs: 
      - container-runner-server-helm-plan:
          context:
            - kubeconfig
            - minio_backend
          <<: *default_branch_filtering
      - terraform-apply:
          requires:
            - container-runner-server-helm-plan
          context:
            - kubeconfig
            - minio_backend
          <<: *default_branch_filtering
  terraform-docker-host: 
    when: << pipeline.parameters.docker_host >>
    jobs:
      - terraform-docker-host-plan:
          context:
            - minio_backend
            - docker_host
          <<: *default_branch_filtering
      - terraform-apply-docker-host:
          requires:
            - terraform-docker-host-plan
          context:
            - minio_backend
            - docker_host
          <<: *default_branch_filtering

  terraform-influxdb:
    when: << pipeline.parameters.influxdb >>
    jobs:
      - terraform-influxdb-plan:
          context: 
            - minio_backend
            - influxdb
          <<: *default_branch_filtering
      - terraform-apply-influxdb:
          requires:
            - terraform-influxdb-plan
          context:
            - minio_backend
            - influxdb
          <<: *default_branch_filtering
  
  terraform-proxmox:
    when: << pipeline.parameters.proxmox0 >>
    jobs:
      - terraform-plan-proxmox:
          context:
            - minio_backend
            - proxmox
          <<: *default_branch_filtering
      - terraform-apply-proxmox:
          requires:
            - terraform-plan-proxmox
          context:
            - minio_backend
            - proxmox
          <<: *default_branch_filtering
    